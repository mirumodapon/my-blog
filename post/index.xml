<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Mirumo's Blog</title><link>https://blog.mirumo.net/post/</link><description>Recent content in Posts on Mirumo's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Fri, 13 Jun 2025 23:13:20 +0900</lastBuildDate><atom:link href="https://blog.mirumo.net/post/index.xml" rel="self" type="application/rss+xml"/><item><title>揪配逆斯 2025 - 動漫迷與購物狂的東京行</title><link>https://blog.mirumo.net/post/japan20250614/</link><pubDate>Fri, 13 Jun 2025 23:13:20 +0900</pubDate><guid>https://blog.mirumo.net/post/japan20250614/</guid><description>&lt;img src="https://blog.mirumo.net/post/japan20250614/cover.jpeg" alt="Featured image of post 揪配逆斯 2025 - 動漫迷與購物狂的東京行" />&lt;p>昨天真的走到腿快斷，大家一回到民宿就像被抽乾電力的手機，全員累翻。
原本規劃好八點出門，但現實總是比計畫殘酷，一路拖到將近九點半，才終於集合完畢，緩緩出發。
今天的行程，是特別替同行的宅宅好友量身打造的，你大概也猜到了──沒錯，重點就是秋葉原！&lt;/p>
&lt;p>我們大約在上午十一點抵達秋葉原車站。接近中午，肚子也開始抗議，原本打算去吃漢堡排，但一看到門口排隊的人著，立刻放棄，轉戰旁邊百貨公司覓食。
結果餐廳雖然不用排隊，但餐點的表現完全沒有驚喜，甚至有點空虛——花了不少錢，卻吃不出相對應的價值感，讓人覺得心裡空空的。&lt;/p>
&lt;h2 id="秋葉原">秋葉原
&lt;/h2>&lt;p>吃完飯後，我們正式展開秋葉原的探險。沿著街道走，每間店裡都塞滿各種動漫周邊，扭蛋機更是無處不在，幾乎每個角落都能看到轉動的聲音與驚喜的表情。
路邊偶爾會遇到 Coser 派發宣傳單，不過我們這群宅宅顯然「恥力」不足，誰也不敢踏進女僕咖啡廳，只能遠遠看著。&lt;/p>
&lt;p>這時，我女友的「海賊王雷達」全程開啟，只要看到相關周邊，眼睛就會瞬間發亮。但向來精打細算的她，仍然克制住購物衝動，直到在某間店裡發現一款特別的拼圖——
由無數角色照片拼湊成的大圖。那一刻，她終於忍不住下手，提著戰利品笑得像個孩子，臉上滿是滿足感。&lt;/p>
&lt;p>最後，我們來到了一家大型夾娃娃機店，氣氛瞬間變得熱血起來。同行的好友直接開啟「夾娃娃修羅場」模式，從各種動漫公仔到模型，全都成了他們的目標。
沒多久，他們戰果滿滿，提袋都快裝不下，看起來就像剛打完一場夾娃娃副本。
而我呢？運氣還不錯，只花了 200 日圓就順利夾到一隻超可愛的卡比，
還在女友面前小小得意了一下，結果下一秒在挑戰魯夫公仔時直接翻車，夾到一半竟然整個滑落，當場只剩下一句「QAQ」寫在臉上。
更誇張的是，這家店樓上竟然還有一整層街機遊戲區。我們那位號稱「大師」的好友，
挑了一台《魂鬥羅》對戰機，直接跟路人開始 PK，現場直接變成格鬥擂台，還吸引不少圍觀，瞬間變成全場焦點，超有動漫熱血感。
&lt;img src="https://blog.mirumo.net/post/japan20250614/Akihabaro.jpeg"
width="720"
height="600"
srcset="https://blog.mirumo.net/post/japan20250614/Akihabaro_hu_918245a733966ab2.jpeg 480w, https://blog.mirumo.net/post/japan20250614/Akihabaro_hu_3b18dc838cd6c607.jpeg 1024w"
loading="lazy"
alt="Akihabara"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="288px"
>&lt;/p>
&lt;h2 id="上野恩賜公園---五條天神社">上野恩賜公園 - 五條天神社
&lt;/h2>&lt;p>逛完熱鬧的秋葉原後，我們決定換個節奏，前往上野恩賜公園，享受片刻的寧靜。
到的時候已經接近傍晚，第一眼看到公園的規模，
我們全員都愣了一下——真的超大，比我們想像中還要遼闊。
此時大家的腳幾乎已經接近報廢狀態，於是我們理智地放棄「完全攻略」的想法，
只挑了一個比較近的景點——五條天神社，打算稍微走走拍拍，順便深呼吸一下涼爽的晚風。
&lt;img src="https://blog.mirumo.net/post/japan20250614/Gojoten.jpeg"
width="720"
height="1280"
srcset="https://blog.mirumo.net/post/japan20250614/Gojoten_hu_1824f8d987433f0b.jpeg 480w, https://blog.mirumo.net/post/japan20250614/Gojoten_hu_ad0e96e4def25b3e.jpeg 1024w"
loading="lazy"
alt="Gojoten"
class="gallery-image"
data-flex-grow="56"
data-flex-basis="135px"
>
&lt;img src="https://blog.mirumo.net/post/japan20250614/Gojoten1.jpeg"
width="720"
height="480"
srcset="https://blog.mirumo.net/post/japan20250614/Gojoten1_hu_f1709e0b559b984e.jpeg 480w, https://blog.mirumo.net/post/japan20250614/Gojoten1_hu_9f041c7637136cde.jpeg 1024w"
loading="lazy"
alt="Gojoten"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>但就在我們準備離開時，才發現時間不早了，
神社幾乎要關門，公園的出入口也陸續封閉，只剩下大門可以通行。
我們一開始天真地以為沿著原路走回去就好，結果完全行不通，直接被封鎖線擋下。
最後只好臨時改變路線，一路繞道，邊走邊找出口，&lt;/p>
&lt;h2 id="阿美橫町">阿美橫町
&lt;/h2>&lt;p>接著，我們來到阿美橫町。整排商店街的氛圍真的很棒，有點像台灣的夜市，
但街景和招牌整齊許多，逛起來特別舒服，不由得冒出一句：「別人的總是比較好。」
&lt;img src="https://blog.mirumo.net/post/japan20250614/cover.jpeg"
width="720"
height="405"
srcset="https://blog.mirumo.net/post/japan20250614/cover_hu_cb18a04b382df637.jpeg 480w, https://blog.mirumo.net/post/japan20250614/cover_hu_f0f3f3962923e8d9.jpeg 1024w"
loading="lazy"
alt="Ameyoko"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>我和女友只要看到藥妝店，就會忍不住衝進去，一逛就是一陣子才出來。
大約下午五點抵達，一路逛到七點，手上已經提滿戰利品，大包小包提到手快抽筋。&lt;/p>
&lt;p>逛累了，我們隨意挑了一間燒烤店坐下休息。
店內帶點居酒屋的氛圍，烤物香氣十足，味道也不錯，但份量偏小，
吃完還是覺得有點空虛，嘴巴和胃都默默抗議著。&lt;/p></description></item><item><title>揪配逆斯 2025 - 淺草晨光與晴空塔的夜景</title><link>https://blog.mirumo.net/post/japan20250613/</link><pubDate>Fri, 13 Jun 2025 22:51:39 +0900</pubDate><guid>https://blog.mirumo.net/post/japan20250613/</guid><description>&lt;img src="https://blog.mirumo.net/post/japan20250613/cover.png" alt="Featured image of post 揪配逆斯 2025 - 淺草晨光與晴空塔的夜景" />&lt;p>原本以為今天要輕鬆一點，沒想到不知哪來的動力，大家居然不只準時，
甚至還提早集合，直接往淺草出發。
事後證明，早起真的是正確的選擇 —— 抵達時仲見世通上的人還不多，
陽光斜斜地灑在兩旁的老店鋪上，整條街都透著一種寧靜的美感。
這個時間來拍照，完美。&lt;/p>
&lt;p>我們先隨意逛了逛，邊走邊拍照，然後決定先去填飽肚子。
走到附近一家老派的咖啡店 ——「&lt;a class="link" href="https://maps.app.goo.gl/CyQVn8HDhVj73Eqj9" target="_blank" rel="noopener"
>咖啡老舖 友路有 淺草店&lt;/a>」。
店內布置滿滿的昭和風味，像是走進時光隧道。
我點了一份簡單的早餐套餐：熱奶茶、厚片吐司加上一顆煎蛋。
味道不複雜，但卻溫暖人心，
有種「真的醒在日本」的感覺——彷彿動畫裡咬著吐司衝出門的場景突然成真了。
&lt;img src="https://blog.mirumo.net/post/japan20250613/breakfast.jpeg"
width="720"
height="405"
srcset="https://blog.mirumo.net/post/japan20250613/breakfast_hu_aa62c3720d3e4b7a.jpeg 480w, https://blog.mirumo.net/post/japan20250613/breakfast_hu_636e4be1c3719b95.jpeg 1024w"
loading="lazy"
alt="咖啡老舖_友路有"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;h2 id="雷門淺草寺">雷門淺草寺
&lt;/h2>&lt;p>但就在我們悠閒吃著早餐的短短 30 分鐘裡，外頭的世界瞬間變了樣。
剛走進咖啡店時，外頭還是陽光斜灑、行人稀疏，
一副平日早晨的模樣，結果等我們一轉身準備離開，
整條仲見世通已經擠得水洩不通。觀光客像是突然從地下冒出來似的，
整條街瞬間被熱鬧與喧囂吞沒。原本還覺得自己像當地人一樣優雅漫步，
下一秒就被人潮推進了觀光模式，節奏直接切換。&lt;/p>
&lt;p>我們跟著隊伍般的觀光人流慢慢移動，邊走邊拍照，邊吃邊看，一路晃到了淺草寺主殿。
這些場景在無數的電影、動漫當中出現，現在終於身在其中，雖然在螢幕上看過無數次，
但當我親身走到它底下抬頭仰望時，心中還是無比的悸動。
那份熟悉卻又陌生的震撼，好像某個長久以來只存在於畫面裡的夢境，突然穿越次元落到了現實世界。
那一刻，旅程有了一種特別的重量，
&lt;img src="https://blog.mirumo.net/post/japan20250613/Senso_ji.jpeg"
width="720"
height="405"
srcset="https://blog.mirumo.net/post/japan20250613/Senso_ji_hu_121ba42f0a44b4bf.jpeg 480w, https://blog.mirumo.net/post/japan20250613/Senso_ji_hu_d1dd46ae4bc8a6af.jpeg 1024w"
loading="lazy"
alt="雷門淺草寺"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>帶著這份悸動，我們一路跟著人潮走進了主殿。香火裊裊，莊嚴的氣氛與外頭的熱鬧形成鮮明對比，讓人忍不住放慢腳步。
就在大家準備離開時，有人突然提議：「要不要來求個籤？」
眾人立刻點頭同意，興致勃勃地排隊抽籤。
我和女友各自搖動竹筒，心裡帶著點小小的期待。
打開籤盒的那一瞬間，
場面卻意外戲劇化——同行的四位朋友全都是「吉」，只有我們情侶檔雙雙「凶」。
接著笑聲四起，大家紛紛拿著自己的「吉籤」在我們面前比來比去，完全沒有要安慰的意思。
當下我和女友真的只有被嘲笑的份。&lt;/p>
&lt;h2 id="墨田水族館">墨田水族館
&lt;/h2>&lt;p>晴空塔的樓層裡有各種購物、美食，還有不少娛樂設施。
其中四樓特別設有一座小巧卻精緻的水族館。
因為前陣子大熱的動畫《莉可莉絲》曾在這裡取景，
我們也特地把這個地方列進行程。
&lt;img src="https://blog.mirumo.net/post/japan20250613/sumida_garden_eel.jpeg"
width="720"
height="405"
srcset="https://blog.mirumo.net/post/japan20250613/sumida_garden_eel_hu_8b29e103fd03a38c.jpeg 480w, https://blog.mirumo.net/post/japan20250613/sumida_garden_eel_hu_409da21f684f722e.jpeg 1024w"
loading="lazy"
alt="海蛇管"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>雖然這個水族館不大，但卻是我非常喜歡的行程。
一走進昏暗的空間，耳邊只有輕柔的水聲和低沉音樂，
下一刻映入眼簾的，是一群微微發著鮮豔光的水母，
像漂浮在夜空中的小燈籠，優雅而夢幻。
不確定水母是自己發光，還是因為小燈的映照，
但整個畫面美得讓人屏息。
微微發亮的水母在昏暗的空間裡悠悠漂浮，彷彿置身於深黑的深海
，眼前是那些奇妙、會發光的生物在水中舞動。
那種幽藍光影與寧靜感交織的氛圍，讓人完全忘記時間，只想靜靜看著它們優雅地遊動。
&lt;img src="https://blog.mirumo.net/post/japan20250613/sumida_jellyfish.jpeg"
width="720"
height="800"
srcset="https://blog.mirumo.net/post/japan20250613/sumida_jellyfish_hu_85f15c2f0238408d.jpeg 480w, https://blog.mirumo.net/post/japan20250613/sumida_jellyfish_hu_e30ed54035e8ed7b.jpeg 1024w"
loading="lazy"
alt="水母"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="216px"
>&lt;/p>
&lt;h2 id="東京晴空塔">東京晴空塔
&lt;/h2>&lt;p>傍晚，我們搭乘高速電梯直上東京晴空塔的觀景台。
站在觀景台上俯瞰整個城市。
一次就能同時看到白天與夜晚的景色，城市的燈光逐漸亮起，河面倒映著點點燈火，
整個東京像被無數小星星點綴。微風輕拂，夜色與燈海交織，
白天的悠閒漫步與水族館的靜謐，在此刻都得到了完美的收束，令人既興奮又心滿意足。
&lt;img src="https://blog.mirumo.net/post/japan20250613/skytree.jpeg"
width="720"
height="1280"
srcset="https://blog.mirumo.net/post/japan20250613/skytree_hu_e617ed92059b254e.jpeg 480w, https://blog.mirumo.net/post/japan20250613/skytree_hu_b0244aa4c6747df6.jpeg 1024w"
loading="lazy"
alt="晴空塔"
class="gallery-image"
data-flex-grow="56"
data-flex-basis="135px"
>&lt;/p>
&lt;p>在觀景台上方的天望回廊，正展出名偵探柯南特展。
迴廊兩側整排貼滿了角色海報，每個角色都栩栩如生。
站在這裡，不禁想到東京晴空塔在名偵探柯南中多次登場的場景：動畫裡的玻璃曾被開了數槍、千瘡百孔。
我和女友忍不住開始討論起柯哀和新蘭哪對CP更有魅力，她力挺新蘭的甜蜜互動，我則支持柯哀的默契與細膩情感。
&lt;img src="https://blog.mirumo.net/post/japan20250613/conan.jpeg"
width="720"
height="405"
srcset="https://blog.mirumo.net/post/japan20250613/conan_hu_cd9c6ae2191a842f.jpeg 480w, https://blog.mirumo.net/post/japan20250613/conan_hu_6ca202ecd3a85c12.jpeg 1024w"
loading="lazy"
alt="柯南"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;h2 id="在民宿的晚餐">在民宿的晚餐
&lt;/h2>&lt;p>晚餐，我們在附近的超市買了一些特價的即期食材，回到民宿自己動手開煮。
不得不說，同行好友的手藝實在不錯，香氣四溢，味道也十分驚喜。
我和女友幾乎沒有下過廚，看著他們熟練地操作食材，
忍不住感嘆：這樣的手藝，他們怎麼還沒找到另一半呢？
邊吃邊笑鬧，這頓簡單的晚餐反而成了我們這天旅程中最溫馨、有趣的時刻之一。&lt;/p></description></item><item><title>揪配逆斯 2025 - 踏入日本</title><link>https://blog.mirumo.net/post/japan20250612/</link><pubDate>Thu, 12 Jun 2025 23:12:35 +0900</pubDate><guid>https://blog.mirumo.net/post/japan20250612/</guid><description>&lt;img src="https://blog.mirumo.net/post/japan20250612/cover.jpg" alt="Featured image of post 揪配逆斯 2025 - 踏入日本" />&lt;p>從一月訂完機票到現在，終於迎來我可以出境的日子。
因為研發替代役的關係，在六月以前我無法離境，如今終於能踏上久違的海外旅程。&lt;/p>
&lt;p>我們一行六人從台灣出發，搭乘國泰航空 CX450 飛往東京。
飛機上有位空姐長相甜美，英文口音優雅動聽，讓人倍感親切與愉悅。
可惜她負責的區域不包括我的座位。
雖然國泰的飛機餐常被人詬病，但這次的宮保雞丁卻出乎意料地合我口味，
是個令人開心的小驚喜。&lt;/p>
&lt;p>抵達日本後，入境大排長龍，
花了不少時間才通關，稍嫌疲憊。
但就在這時，女友竟然巧遇了同校的朋友，在異國他鄉遇見熟人
，這份巧合讓人驚喜不已，也讓我們對接下來的旅程充滿期待。&lt;/p>
&lt;p>剛下飛機時，人生地不熟，只能憑著手機導航與一點直覺摸索方向。
好不容易才找到通往 Airbnb 的火車路線，總算完成抵達東京的第一項任務。&lt;/p>
&lt;p>這次我們選擇搭乘 Sky Aces 的路線，經過青砥轉車，最後抵達了京成立石站。
步行回住宿的途中，經過一條充滿在地風情的商店街，
與常見的觀光景點風格大異其趣，街道氛圍樸實自然，別有一番風味。&lt;/p>
&lt;p>我們入住的民宿是一棟小巧溫馨的家庭式房屋，六個人共享一整層空間，
有客廳、餐桌與廚房，設備齊全。
大家一拍即合，決定找一天晚上一起下廚，好好「炸廚房」一次，
為這趟旅程增添趣味。&lt;/p>
&lt;p>稍作休息後，我們到附近覓食，
選中了一家文字燒餐廳(&lt;a class="link" href="https://maps.app.goo.gl/ehm4w1MFWexFhZtc7" target="_blank" rel="noopener"
>もん字屋&lt;/a>)。
這種料理和中華料理很不一樣，需要自己動手在鐵板上慢慢煎熟。
店員看到我們是外國人，特地親切地前來示範製作方式，
讓我們能夠放心享用這道地美食。&lt;/p>
&lt;p>一邊煎著文字燒、一邊聊天，感覺彷彿置身於日本動畫或日劇的世界，
真實又夢幻。餐廳氣氛宛如溫馨的居酒屋，充滿在地的人情味。
雖然老闆的英文帶著濃厚的日本腔，我大多聽不太懂，
但幸好女友能理解並幫忙翻譯，整體氛圍十分歡樂。
文字燒的醬汁味道濃郁，讓我聯想到中式燴飯，熟悉中又帶著新鮮感。
&lt;img src="https://blog.mirumo.net/post/japan20250612/dinner.jpg"
width="2268"
height="1461"
srcset="https://blog.mirumo.net/post/japan20250612/dinner_hu_84526bfb355a7484.jpg 480w, https://blog.mirumo.net/post/japan20250612/dinner_hu_3ed71c6d0c298e1c.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>吃完晚餐後，我們沿著街道散步，細細感受日本建築的層次與晚間涼爽的空氣。
由於晚餐份量不多，我們還特地繞去便利商店買泡麵。
令人驚喜的是，日本泡麵的風味比想像中更有深度，
也許是異地旅遊的心情加成，讓味覺變得格外敏銳。&lt;/p>
&lt;p>就這樣，我們充滿驚喜與新鮮感的第一天，在笑聲與探索中劃下句點。
期待接下來的日子裡，會有更多難忘的回憶等待著我們去發現。&lt;/p></description></item><item><title>用 AI 加速學習：Rust 基本語法與資料型態</title><link>https://blog.mirumo.net/post/rustlearnwithai2/</link><pubDate>Tue, 22 Apr 2025 22:42:36 +0800</pubDate><guid>https://blog.mirumo.net/post/rustlearnwithai2/</guid><description>&lt;img src="https://blog.mirumo.net/post/rustlearnwithai2/cover.png" alt="Featured image of post 用 AI 加速學習：Rust 基本語法與資料型態" />&lt;h2 id="rust-程式基本語法">Rust 程式基本語法
&lt;/h2>&lt;p>首先我們來看看一段簡單的程式，這段程式會印出 Hello World！&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>&lt;code>fn&lt;/code> 是定義函數的關鍵字，&lt;code>main&lt;/code> 是函數的名稱，也是整個程式的入口。&lt;/li>
&lt;li>&lt;code>()&lt;/code> 是函數的參數，這裡是空的。&lt;/li>
&lt;li>&lt;code>{}&lt;/code> 是函數的內容，這裡是程式的主體。&lt;/li>
&lt;li>&lt;code>println!&lt;/code> 印出字串到終端（帶有 ! 表示它是一個宏 macro）。&lt;/li>
&lt;/ul>
&lt;p>這就是 Rust 的基本架構。&lt;/p>
&lt;h2 id="rust-的變數">Rust 的變數
&lt;/h2>&lt;h3 id="變數的宣告">變數的宣告
&lt;/h3>&lt;p>在 Rust 可以用 &lt;code>let&lt;/code> 關鍵字來定義變數。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這裡的 &lt;code>x&lt;/code> 是變數的名稱，&lt;code>5&lt;/code> 是變數的初始值。&lt;br>
這裡的數值預設為 &lt;code>i32&lt;/code>，也就是 32 位元整數。&lt;/p>
&lt;p>我們也可以在變數宣告時指定變數的型態。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="kt">i64&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如此一來 &lt;code>y&lt;/code> 的型態就是 &lt;code>i64&lt;/code>，也就是 64 位元整數。&lt;/p>
&lt;p>接著，我們可以用 &lt;code>println!&lt;/code> 來印出變數的值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;z = &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>println!&lt;/code> 的第一個參數是字串，
字串中 &lt;code>&amp;quot;z = {}&amp;quot;&lt;/code> 使用了 &lt;code>{}&lt;/code>，
這是佔位符（placeholder），表示要插入一個變數的值，
這個值會在接續的參數中被指定。&lt;/p>
&lt;h3 id="可變與不可變變數">可變與不可變變數
&lt;/h3>&lt;p>在 Rust 中，變數的預設為不可變的（immutable），
當我們試圖改變變數的值時，會得到錯誤。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// ❌
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果我們想要改變變數的值時，
我們需要在變數宣告的時候，加上 &lt;code>mut&lt;/code> 關鍵字。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// ⭕️
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="數值的表示方式">數值的表示方式
&lt;/h3>&lt;p>我們可以用以下方法來表示數值：&lt;/p>
&lt;ul>
&lt;li>十進制數字： &lt;code>12&lt;/code>, &lt;code>-12&lt;/code>&lt;/li>
&lt;li>十六進制數字： &lt;code>0x6D&lt;/code>, &lt;code>-0x4F&lt;/code>&lt;/li>
&lt;li>八進制數字： &lt;code>0o12&lt;/code>, &lt;code>-0o12&lt;/code>&lt;/li>
&lt;li>二進制數字： &lt;code>0b1101&lt;/code>, &lt;code>-0b1101&lt;/code>&lt;/li>
&lt;li>浮點數： &lt;code>12.5&lt;/code>, &lt;code>-12.5&lt;/code>, &lt;code>12.5e2&lt;/code>, &lt;code>-12.5e2&lt;/code>&lt;/li>
&lt;li>字元： &lt;code>'a'&lt;/code>, &lt;code>'中'&lt;/code>, &lt;code>'😊'&lt;/code>&lt;/li>
&lt;li>字串： &lt;code>&amp;quot;Hello, World! 👋&amp;quot;&lt;/code>&lt;/li>
&lt;li>布林值： &lt;code>true&lt;/code>, &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>這些數值都是可以在 Rust 中使用的。&lt;/p>
&lt;h2 id="rust-中的資料型態">Rust 中的資料型態
&lt;/h2>&lt;h3 id="基本資料型態">基本資料型態
&lt;/h3>&lt;p>在 Rust 中，基本資料型態包括:&lt;/p>
&lt;h4 id="整數integer">整數（integer）
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>型別&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>i8&lt;/code>&lt;/td>
&lt;td>有符號 8 位元整數&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>i16&lt;/code>&lt;/td>
&lt;td>有符號 16 位元整數&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>i32&lt;/code>&lt;/td>
&lt;td>有符號 32 位元整數&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>i64&lt;/code>&lt;/td>
&lt;td>有符號 64 位元整數&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>i128&lt;/code>&lt;/td>
&lt;td>有符號 128 位元整數&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>isize&lt;/code>&lt;/td>
&lt;td>有符號系統依據的位元數&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>u8&lt;/code>&lt;/td>
&lt;td>無符號 8 位元整數&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>u16&lt;/code>&lt;/td>
&lt;td>無符號 16 位元整數&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>u32&lt;/code>&lt;/td>
&lt;td>無符號 32 位元整數&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>u64&lt;/code>&lt;/td>
&lt;td>無符號 64 位元整數&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>u128&lt;/code>&lt;/td>
&lt;td>無符號 128 位元整數&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>usize&lt;/code>&lt;/td>
&lt;td>無符號系統依據的位元數&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="浮點數float">浮點數（float）
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>型別&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>f32&lt;/code>&lt;/td>
&lt;td>32 位元浮點數&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>f64&lt;/code>&lt;/td>
&lt;td>64 位元浮點數&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="布林boolean">布林（boolean）
&lt;/h4>&lt;p>在 Rust 中，布林值以 &lt;code>bool&lt;/code> 這個型別來表示，其值為 &lt;code>true&lt;/code> 或 &lt;code>false&lt;/code>。&lt;/p>
&lt;h4 id="字元character">字元（character）
&lt;/h4>&lt;p>在 Rust 中，字元是一個 4 位元的 Unicode 字元。並且以 &lt;code>char&lt;/code> 這個型別來表示字元。&lt;/p>
&lt;h3 id="複合資料型態">複合資料型態
&lt;/h3>&lt;h4 id="元組tuple">元組（tuple）
&lt;/h4>&lt;p>元組是一組相同或不相同型別的值的集合。&lt;br>
使用 小括號 &lt;code>( )&lt;/code> 包住，並用逗號 &lt;code>,&lt;/code> 分隔元素。&lt;br>
Tuple 的長度是固定的，定義後無法改變。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tuple&lt;/span>: &lt;span class="p">(&lt;/span>&lt;span class="kt">i8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">f32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sc">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">3.0&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>並且我們可以用解構賦值來讀取元組中的值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tuple&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果想要讀取元組中的某一個值時，可以使用 &lt;code>.&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tuple&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 第一個元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tuple&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 第二個元素
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="陣列array">陣列（array）
&lt;/h3>&lt;p>陣列是固定長度的資料集合，其中每個元素都有相同的型別。&lt;br>
陣列的大小在宣告時就必須確定，無法動態擴展。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我們也可以用 &lt;code>[type; length]&lt;/code> 來宣告陣列：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">numbers&lt;/span>: &lt;span class="p">[&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// [12; 5] 等同於 [12, 12, 12, 12, 12]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在使用陣列時，與大部分的程式語言一樣，使用 &lt;code>arr[index]&lt;/code> 來讀取陣列中的元素。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">34&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">56&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">78&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">90&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">last&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The first number is &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The last number is &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="註解">註解
&lt;/h2>&lt;p>在 Rust 中，可以使用 &lt;code>//&lt;/code> 或是 &lt;code>/* */&lt;/code> 來註解程式碼。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 這是一個單行註解
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 這是一個多行註解
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="rust-中的控制流程">Rust 中的控制流程
&lt;/h2>&lt;h3 id="if-條件判斷">if 條件判斷
&lt;/h3>&lt;p>Rust 當中的 &lt;code>if&lt;/code> 與大部分的程式語言的使用方式是類似的，&lt;br>
當然也跟其他程式語言一樣，可以使用 &lt;code>else if&lt;/code> 來增加條件判斷。&lt;br>
比較嚴格的是條件判斷必須是 &lt;code>bool&lt;/code> 型別。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;You are an adult!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;You are a child!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而在 Rust 當中，並沒有三元運算子，但我們可以使用 &lt;code>if&lt;/code> 來達成相同的效果。&lt;br>
值得注意的是，在 &lt;code>if&lt;/code> 與 &lt;code>else&lt;/code> 最後的內容不需要加上分號，而且必須是相同的型別。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;You are an adult!&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;You are a child!&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>並且我們也可以在 {} 當中，使用多個表達式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The value of y is &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 6
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="match-條件判斷">match 條件判斷
&lt;/h3>&lt;p>&lt;code>match&lt;/code> 類似於其程式語言中的 &lt;code>switch&lt;/code>，用來對整數、字串、字元等值進行比對。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;!&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在這段程式中，我們使用 &lt;code>match&lt;/code> 來判斷 &lt;code>x&lt;/code> 的值，並依照不同的值來執行不同的操作。&lt;br>
其中 &lt;code>_&lt;/code> 代表其他不符合上述條件的值。&lt;/p>
&lt;p>&lt;code>match&lt;/code> 也跟 &lt;code>if&lt;/code> 一樣，回傳符合條件的數值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sc">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另外，&lt;code>match&lt;/code> 可以多個條件合併，又或是在整數區間當中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">..=&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 4 &amp;lt;= x &amp;lt;= 6
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 7 &amp;lt;= x &amp;lt; 8
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="loop-迴圈">loop 迴圈
&lt;/h3>&lt;p>&lt;code>loop&lt;/code> 是在 Rust 當中的無限循環迴圈，通常使用 &lt;code>break&lt;/code> 或是配合 &lt;code>return&lt;/code> 來跳出迴圈。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">loop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="while-迴圈">while 迴圈
&lt;/h3>&lt;p>&lt;code>while&lt;/code> 與大部分程式語言行為相同，在符合條件下，持續執行迴圈內的程式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="for-迴圈">for 迴圈
&lt;/h3>&lt;p>在 Rust 中，&lt;code>for&lt;/code> 迴圈主要針對數組和迭代器進行迴圈運算。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>要注意的是 &lt;code>tuple&lt;/code> 是不能使用 &lt;code>for&lt;/code> 迴圈的。&lt;/p>
&lt;p>我們可以搭配 &lt;code>.iter()&lt;/code> 與 &lt;code>.enumerate()&lt;/code> 來使用迭代器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">enumerate&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">: &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果要使用在字串當中，可以使用 &lt;code>.chars()&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以在 &lt;code>for&lt;/code> 迴圈中，使用連續整數&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">..=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">rev&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中，&lt;code>.rev()&lt;/code> 可以將其反轉。&lt;/p>
&lt;h3 id="break-與-continue-迴圈控制">break 與 continue 迴圈控制
&lt;/h3>&lt;p>&lt;code>beark&lt;/code> 可以用來跳出迴圈，&lt;code>continue&lt;/code> 可以用來繼續下一次迴圈。&lt;/p>
&lt;p>首先我們來看 &lt;code>break&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">loop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我們也可以幫迴圈標籤，並且在迴圈中指定要 &lt;code>break&lt;/code> 或 &lt;code>continue&lt;/code> 的迴圈。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="na">&amp;#39;outer&lt;/span>: &lt;span class="nc">loop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">loop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">continue&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nl">&amp;#39;outer&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最後，我們來介紹 &lt;code>break&lt;/code> 的回傳功能。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">loop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我們可以利用 &lt;code>break&lt;/code> 來回傳數值，這裡跟 &lt;code>match&lt;/code> 或是 &lt;code>if&lt;/code> 一樣，回傳的數值後面不用加分號。&lt;/p>
&lt;h2 id="函式function">函式（Function）
&lt;/h2>&lt;p>在基本架構中，我們提到了程式的入口 &lt;code>main&lt;/code>，就是一個函式，&lt;br>
我們使用 &lt;code>fn&lt;/code> 來定義函式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">say_hello&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>函式的參數、回傳值、呼叫函式等等，跟大部分程式語言的概念是一樣的，&lt;br>
這裡就不再進一步介紹了。&lt;/p>
&lt;p>比較值得注意的是我們可以在參數後方加上 &lt;code>-&amp;gt;&lt;/code> 來指定回傳值的型別。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>並且在函式當中的最後一個陳述式，在不加上分號的情況下，會自動作為回傳值被回傳。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="陳述式與表達式">陳述式與表達式
&lt;/h2>&lt;p>Rust 是基於表達式的語言（expression-based），因此在這個小節，我們要介紹的是陳述式和表達式的差別。&lt;/p>
&lt;h3 id="陳述式statements">陳述式（Statements）
&lt;/h3>&lt;p>陳述式代表著程式當中的指令，這個指令不會回傳任何的數值。
像是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="表達式expressions">表達式（Expressions）
&lt;/h3>&lt;p>而表達式則是指程式當中的計算結果，這個計算結果會回傳一個數值。&lt;br>
我們來看看這個範例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 24
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這個範例中的 &lt;code>{}&lt;/code>，如同函式的回傳一樣，就是表達式的一部分。&lt;/p>
&lt;p>而其實在前幾個小節當中，我們已經看到了表達式，像是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>還有 &lt;code>if&lt;/code> 條件判斷的表達式，這些可以產生一個數值的指令，也是表達式的一種。&lt;/p>
&lt;hr>
&lt;h4>參考資料&lt;/h4>
&lt;ul>
&lt;li>&lt;a class="link" href="https://doc.rust-lang.org/book/ch01-00-getting-started.html" target="_blank" rel="noopener"
>Rust Official Documentation Book, Section 3&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>用 AI 加速學習：Rust 語言簡介與環境設置</title><link>https://blog.mirumo.net/post/rustlearnwithai1/</link><pubDate>Sat, 29 Mar 2025 22:58:27 +0800</pubDate><guid>https://blog.mirumo.net/post/rustlearnwithai1/</guid><description>&lt;img src="https://blog.mirumo.net/post/rustlearnwithai1/cover.png" alt="Featured image of post 用 AI 加速學習：Rust 語言簡介與環境設置" />&lt;h2 id="rust-是什麼">Rust 是什麼？
&lt;/h2>&lt;p>Rust 是一個邊一行的程式語言，主打安全性、速度、並行處理。
相對於其他程式語言來說 Rust 可以說是非常年輕的，
2012 年 1 月懷上的它，直到 2015 年 5 月 15 日才出生。&lt;/p>
&lt;h2 id="安裝-rust">安裝 Rust
&lt;/h2>&lt;p>在 Rust 個&lt;a class="link" href="https://www.rust-lang.org/" target="_blank" rel="noopener"
>官方網站&lt;/a>中，
推薦了使用 rustup 來安裝 Rust。
rustup 是 Rust 官方提供的工具鏈安裝與管理器，
可以讓你方便地安裝 Rust、切換不同版本。
Unix-like 作業系統可以執行以下指令來安裝 rustup：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ curl --proto &lt;span class="s1">&amp;#39;=https&amp;#39;&lt;/span> --tlsv1.2 -sSf https://sh.rustup.rs &lt;span class="p">|&lt;/span> sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接這我們就可以使用 &lt;code>rustup&lt;/code> 指令來安裝 Rust。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rustup install stable
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這個指令會幫我們下載 Rust 的穩定版本，與相關的工具（包含 rustfmt、cargo 等）。&lt;/p>
&lt;h2 id="hello-rust">Hello Rust
&lt;/h2>&lt;p>安裝完之後，可以使用 &lt;code>rustc --version&lt;/code> 指令來檢查是否安裝成功。
這是 Rust 的編譯器，可以用來編譯 Rust 程式。&lt;/p>
&lt;p>接這我們就可以開始寫 Rust 程式了！
首先建立一個檔案 &lt;code>hello.rs&lt;/code>，並在裡面寫入以下程式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, Rust!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>&lt;code>fn&lt;/code> 是建立函數的關鍵字。&lt;/li>
&lt;li>&lt;code>main&lt;/code> 是函數的名稱，在 Rust 當中 main 作為整個程式的入口。&lt;/li>
&lt;li>&lt;code>println!&lt;/code> 以 &lt;code>!&lt;/code> 結尾在 Rust 中表示巨集（macro）。&lt;/li>
&lt;li>&lt;code>&amp;quot;Hello, Rust!&amp;quot;&lt;/code> 是要印出的字串。&lt;/li>
&lt;/ul>
&lt;p>接著使用以下指令來編譯程式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rustc hello.rs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這樣就可以編譯出一個與檔案名稱相同的執行檔了。
我們試著執行這個執行檔。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ./hello
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hello, Rust!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="cargo">Cargo
&lt;/h2>&lt;p>&lt;strong>Cargo&lt;/strong> 是 Rust 的建置工具與套件管理工具，
大多數專案都會透過 Cargo 進行管理。&lt;br>
透過 &lt;code>rustup&lt;/code> 安裝 Rust 時，Cargo 也會一併安裝。&lt;/p>
&lt;p>首現我們先用 Cargo 建立一個專案：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ cargo new hello_cargo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這時 cargo 會幫我們建立一個結構如下的資料夾：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">hello_cargo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── .git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── (...)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── src
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── main.rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── Cargo.toml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── .gitignore
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中，&lt;code>main.rs&lt;/code> 是程式的入口，&lt;code>Cargo.toml&lt;/code> 是專案的配置檔。&lt;/p>
&lt;p>進入專案資料夾後，我們可以打開 &lt;code>src/main.rs&lt;/code>，並且將剛剛的程式寫入這個檔案中。
接著透過 Cargo 指令來執行專案。Cargo 會自動編譯原始碼並執行可執行檔。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ cargo run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Compiling hello_rust v0.1.0 &lt;span class="o">(&lt;/span>/playground/hello_rust&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Finished &lt;span class="sb">`&lt;/span>dev&lt;span class="sb">`&lt;/span> profile &lt;span class="o">[&lt;/span>unoptimized + debuginfo&lt;span class="o">]&lt;/span> target&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span> in 0.17s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Running &lt;span class="sb">`&lt;/span>target/debug/hello_rust&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hello, world!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這個指令執行直，會先編譯 &lt;code>src/main.rs&lt;/code>，再執行程式。
這個編譯的結果，會生成在路徑 &lt;code>target/debug/hello_rust&lt;/code> 當中。&lt;/p>
&lt;p>我們也可以編譯但不執行檔案：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ cargo build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或是僅檢查程式的語法錯誤，但不編譯該程式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ cargo check
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最後，當我們完成了專案時，可以使用 release 模式進行最佳化編譯。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ cargo build --release
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這會產生效能更好的執行檔，放在 &lt;code>target/release&lt;/code> 目錄中。雖然編譯時間會增加，但執行效率會大幅提升。&lt;/p>
&lt;hr>
&lt;h4>參考資料&lt;/h4>
&lt;ul>
&lt;li>&lt;a class="link" href="https://doc.rust-lang.org/book/ch01-00-getting-started.html" target="_blank" rel="noopener"
>Rust Official Documentation Book, Section 1&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://youtu.be/5C_HPTJg5ek" target="_blank" rel="noopener"
>Rust in 100 Seconds&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>用 AI 加速學習：規劃 Rust 學習路徑</title><link>https://blog.mirumo.net/post/rustlearnwithai0/</link><pubDate>Sat, 29 Mar 2025 22:58:27 +0800</pubDate><guid>https://blog.mirumo.net/post/rustlearnwithai0/</guid><description>&lt;img src="https://blog.mirumo.net/post/rustlearnwithai0/cover.png" alt="Featured image of post 用 AI 加速學習：規劃 Rust 學習路徑" />&lt;p>大家都說 Rust 很難，上手的難度簡直高得讓人望而卻步。&lt;br>
語法跟概念堆得跟魔王塔一樣高，還暗藏陷阱，一個不注意就直接卡關回城重練。&lt;br>
我一開始滿腔熱血地衝進去，結果三秒鐘後腦袋就冒煙。🤯&lt;/p>
&lt;p>。。。&lt;/p>
&lt;p>所以我召喚來了 Ai 來進攻 Rust 編譯器。&lt;/p>
&lt;p>「請幫我規劃一個完整的 rust 學習地圖，分為多個小節，並且以條列的方式點出該小節的重要概念。提供我可以一步一步的學習 rust 語言的規劃，並且在每個小節都設計練習題，讓我更加熟練 rust。」&lt;/p>
&lt;h2 id="rust-語言簡介與環境設置">Rust 語言簡介與環境設置
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>重要概念：&lt;/strong>
&lt;ul>
&lt;li>Rust 語言特色與優點（安全性、速度、並發）&lt;/li>
&lt;li>安裝 Rust：使用 &lt;a class="link" href="https://rustup.rs" target="_blank" rel="noopener"
>Rustup&lt;/a> 工具&lt;/li>
&lt;li>Cargo：Rust 的建構與套件管理工具&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>練習題：&lt;/strong>
&lt;ul>
&lt;li>安裝 Rust 與 Cargo，並確認安裝是否成功。&lt;/li>
&lt;li>使用 Cargo 建立你的第一個專案，編寫並執行 &amp;ldquo;Hello, world!&amp;rdquo; 範例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="基本語法與資料型態">基本語法與資料型態
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>重要概念：&lt;/strong>
&lt;ul>
&lt;li>變數與不可變性（預設不可變，使用 &lt;code>mut&lt;/code> 開啟可變性）&lt;/li>
&lt;li>基本資料型態：整數、浮點數、布林、字串、陣列、元組&lt;/li>
&lt;li>函數定義與呼叫&lt;/li>
&lt;li>條件判斷（if/else）與迴圈（loop、while、for）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>練習題：&lt;/strong>
&lt;ul>
&lt;li>撰寫一個簡單的計算機程式，利用條件判斷選擇不同運算。&lt;/li>
&lt;li>使用迴圈印出 1 至 10 的數字，嘗試用不同迴圈結構實作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="所有權借用與生命週期">所有權、借用與生命週期
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>重要概念：&lt;/strong>
&lt;ul>
&lt;li>所有權系統：每個值都有且僅有一個所有者&lt;/li>
&lt;li>借用：不可變借用與可變借用，理解借用規則&lt;/li>
&lt;li>生命週期：如何告知編譯器資料有效範圍&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>練習題：&lt;/strong>
&lt;ul>
&lt;li>撰寫函數傳遞字串與數值，觀察所有權的轉移與借用。&lt;/li>
&lt;li>嘗試修改程式碼，故意引發借用錯誤，並依照編譯器提示進行修正。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="結構列舉與模式匹配">結構、列舉與模式匹配
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>重要概念：&lt;/strong>
&lt;ul>
&lt;li>結構體（Structs）：定義與使用自訂資料型態。&lt;/li>
&lt;li>列舉（Enums）：定義有限狀態或選項集合。&lt;/li>
&lt;li>模式匹配（match）：根據模式做分支處理。&lt;/li>
&lt;li>Option 與 Result：處理可能缺失或錯誤的值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>練習題：&lt;/strong>
&lt;ul>
&lt;li>定義一個描述幾何圖形（例如圓形、矩形）的列舉，並使用 match 輸出相應的面積計算。&lt;/li>
&lt;li>實作一個簡單的錯誤處理範例，使用 Option 或 Result 處理可能的錯誤狀況。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="泛型traits-與實作">泛型、Traits 與實作
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>重要概念：&lt;/strong>
&lt;ul>
&lt;li>泛型：使函數或結構體能處理不同型態資料。&lt;/li>
&lt;li>Trait：定義共通行為，並實作於不同型態。&lt;/li>
&lt;li>標準 trait（如 Debug、Clone、PartialEq）與自定義 trait。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>練習題：&lt;/strong>
&lt;ul>
&lt;li>寫一個泛型資料結構（例如 Stack 或 Queue），並為其實作 Debug trait。&lt;/li>
&lt;li>定義一個自訂 trait 並實作於至少兩個不同型態，嘗試在程式中使用多態性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="模組系統與包管理">模組系統與包管理
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>重要概念：&lt;/strong>
&lt;ul>
&lt;li>模組（mod）：如何組織程式碼與資料夾結構。&lt;/li>
&lt;li>Crate：Rust 的編譯單位。&lt;/li>
&lt;li>Cargo.toml：管理專案依賴與設定。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>練習題：&lt;/strong>
&lt;ul>
&lt;li>建立一個包含多個模組的小專案，嘗試在不同模組間共享函數與變數。&lt;/li>
&lt;li>在 Cargo.toml 中加入第三方 crate（例如 serde），並寫一個小範例使用該庫進行資料序列化。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="錯誤處理與-panic">錯誤處理與 panic
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>重要概念：&lt;/strong>
&lt;ul>
&lt;li>Result 型態：成功與錯誤狀況的處理方式。&lt;/li>
&lt;li>Option 型態：處理可能缺失的值。&lt;/li>
&lt;li>錯誤傳播（使用 ? 運算子）與 panic 機制。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>練習題：&lt;/strong>
&lt;ul>
&lt;li>撰寫一個檔案 I/O 範例，利用 Result 處理讀取檔案過程中的錯誤。&lt;/li>
&lt;li>改寫函數，從使用 unwrap 改為正確的錯誤傳播與處理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="併發程式設計">併發程式設計
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>重要概念：&lt;/strong>
&lt;ul>
&lt;li>線程（threads）：如何建立與管理線程。&lt;/li>
&lt;li>併發安全：Send 與 Sync 特質。&lt;/li>
&lt;li>Mutex 與 Channel：保護共享資源與線程間通訊。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>練習題：&lt;/strong>
&lt;ul>
&lt;li>撰寫一個多線程程式，使用 Mutex 保護共用計數器。&lt;/li>
&lt;li>使用 Channel 實作生產者-消費者模型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="智能指標與內存管理">智能指標與內存管理
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>重要概念：&lt;/strong>
&lt;ul>
&lt;li>Box：在堆上分配記憶體。&lt;/li>
&lt;li>Rc 與 Arc：多重所有權與跨線程安全共享。&lt;/li>
&lt;li>RefCell 與 Cell：在編譯時期無法確定所有權時提供內部可變性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>練習題：&lt;/strong>
&lt;ul>
&lt;li>撰寫一個簡單的樹狀結構，利用 Rc 與 RefCell 管理節點間的參考。&lt;/li>
&lt;li>嘗試使用 Arc 在多線程中共享不可變資料。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="宏與程式自動化">宏與程式自動化
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>重要概念：&lt;/strong>
&lt;ul>
&lt;li>宏（macro_rules!）：編譯時期程式碼生成與重用。&lt;/li>
&lt;li>Attribute 宏：透過屬性標記自動生成程式碼。&lt;/li>
&lt;li>程式碼縮減與重構。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>練習題：&lt;/strong>
&lt;ul>
&lt;li>撰寫一個簡單的宏，生成重複性程式碼（例如簡化多個相似函數的定義）。&lt;/li>
&lt;li>使用宏改善現有程式碼的可讀性與重用性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="測試與除錯">測試與除錯
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>重要概念：&lt;/strong>
&lt;ul>
&lt;li>單元測試（Unit Test）：模組內測試撰寫與執行。&lt;/li>
&lt;li>整合測試（Integration Test）：跨模組與專案測試。&lt;/li>
&lt;li>除錯技巧：使用 println!、logging 與除錯工具。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>練習題：&lt;/strong>
&lt;ul>
&lt;li>為各個模組撰寫單元測試，確保邏輯正確。&lt;/li>
&lt;li>撰寫整合測試，模擬使用者行為驗證專案整體運作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="rust-生態系統與進階主題">Rust 生態系統與進階主題
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>重要概念：&lt;/strong>
&lt;ul>
&lt;li>crates.io：如何搜尋並使用第三方庫。&lt;/li>
&lt;li>WebAssembly 與嵌入式應用：Rust 的應用範疇擴展。&lt;/li>
&lt;li>非同步程式設計（async/await）：處理非同步 I/O 與高效併發。&lt;/li>
&lt;li>外部函式介面（FFI）：與 C/C++ 等語言整合。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>練習題：&lt;/strong>
&lt;ul>
&lt;li>搜尋並整合一個第三方庫，撰寫一個簡單專案（如 Web API 或 CLI 工具）。&lt;/li>
&lt;li>編寫一個使用 async/await 的非同步網路請求範例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>用對 Mac 工具，連貓都能寫程式</title><link>https://blog.mirumo.net/post/commandlinetoolshare/</link><pubDate>Sun, 23 Feb 2025 13:22:01 +0800</pubDate><guid>https://blog.mirumo.net/post/commandlinetoolshare/</guid><description>&lt;img src="https://blog.mirumo.net/post/commandlinetoolshare/cover.png" alt="Featured image of post 用對 Mac 工具，連貓都能寫程式" />&lt;p>（GPT 取的標題 🤪）&lt;/p>
&lt;p>最近在逛 Apple 官網的時候，看到了 2 萬多塊 的 MacBook Air M2 整修品，
剛好我也快要受不了女朋友的電腦了，索性就下單了 ~~&lt;/p>
&lt;p>不過她是第一次用 Mac，於是我就先來幫她設定啦，
順便分享一下我常使用的 Mac 工具。&lt;/p>
&lt;h2 id="終端機">終端機
&lt;/h2>&lt;h3 id="iterm2">iTerm2
&lt;/h3>&lt;p>身為一個軟體工程師（她應該之後也會是吧？！），終端機是我們很重要的工具。
&lt;a class="link" href="https://iterm2.com/" target="_blank" rel="noopener"
>&lt;strong>iTerm2&lt;/strong>&lt;/a> 是一個終端機模擬器（Terminal emulator），可以當作是macOS 上的&lt;strong>強化版終端機&lt;/strong>，
提供比內建終端更強大的功能、客製化選項與提升生產力的特性，很適合開發者、系統管理員及資深使用者使用。&lt;/p>
&lt;h3 id="tmux">tmux
&lt;/h3>&lt;p>&lt;a class="link" href="https://github.com/tmux/tmux/wiki" target="_blank" rel="noopener"
>&lt;strong>tmux&lt;/strong>&lt;/a>（Terminal Multiplexer）是一款終端多工管理工具，
允許你在單一終端會話（Session）中管理多個視窗與面板，
並支援背景運行、遠端連線保持、分割視窗等功能。&lt;/p>
&lt;h2 id="整合開發環境ide">整合開發環境（IDE)
&lt;/h2>&lt;h3 id="neovim">Neovim
&lt;/h3>&lt;p>&lt;a class="link" href="https://neovim.io/" target="_blank" rel="noopener"
>&lt;strong>Neovim&lt;/strong>&lt;/a> 是 Vim 的改進版，目標是現代化、可擴充、提升效能，
並提供更友善的插件開發與 Lua 配置。
相較於傳統 Vim，Neovim 在 外掛系統、LSP（Language Server Protocol）、內建終端、多執行緒處理等方面有更好的支援，
使其成為現代開發者的首選終端編輯器。&lt;/p>
&lt;p>雖然這東西對初學的人來說很不友善，但她在 VSCode 裡也都用 Vim 模式，應該也沒什麼問題（吧？！）&lt;/p>
&lt;h3 id="cursor">Cursor
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.cursor.com/" target="_blank" rel="noopener"
>&lt;strong>Cursor&lt;/strong>&lt;/a> 是由 VSCode Fork 出來的 IDE，它提供了生成式 AI 來幫助開發者寫程式。
只要打上需求，就自動寫出你要的功能，上班按按 &lt;code>Tab&lt;/code> 就可以下班了 XD&lt;/p>
&lt;h3 id="zed">Zed
&lt;/h3>&lt;p>&lt;a class="link" href="https://zed.dev/" target="_blank" rel="noopener"
>&lt;strong>Zed&lt;/strong>&lt;/a> 是一款由 Rust 開發的 IDE，比起 VSCode 速度可是快了非常的多。
它的一大亮點是它的即時協作功能，使得團隊中的多位開發者可以同時在同一個代碼庫中進行編輯。
同時也整合了 LLM 提供開發的協助。&lt;/p>
&lt;h2 id="markdown-編輯器">Markdown 編輯器
&lt;/h2>&lt;p>&lt;small>這個部分最主要是作為筆記用的工具，而我對筆記工具沒什麼要求，支援 Markdown 輸出就行。&lt;/small>&lt;/p>
&lt;h3 id="zettlr">Zettlr
&lt;/h3>&lt;p>作為開源的推廣者，&lt;a class="link" href="https://www.zettlr.com/" target="_blank" rel="noopener"
>&lt;strong>Zettlr&lt;/strong>&lt;/a> 是我非常喜歡的一款開源 Markdown 編輯器，
畫面乾淨、簡單又容易上手。並且內建對 LaTeX、HTML 等格式的良好支援，
使其成為學術寫作、技術寫作、程式碼文檔等領域的理想選擇。&lt;/p>
&lt;h3 id="obsidian">Obsidian
&lt;/h3>&lt;p>&lt;a class="link" href="https://obsidian.md/" target="_blank" rel="noopener"
>&lt;strong>Obsidian&lt;/strong>&lt;/a> 是一款強大的知識管理和筆記整理工具，
可以使用 Markdown 格式進行筆記創建，並允許用戶將各個筆記通過雙向鏈接進行連接，
這使得它非常適合進行思維導圖、知識圖譜或者個人知識庫的管理。&lt;/p>
&lt;h2 id="瀏覽器">瀏覽器
&lt;/h2>&lt;h3 id="arc">Arc
&lt;/h3>&lt;p>&lt;a class="link" href="https://arc.net/" target="_blank" rel="noopener"
>&lt;strong>Arc&lt;/strong>&lt;/a> 是一款由 The Browser Company 開發的創新型瀏覽器，
旨在提供一個更加現代化且以生產力為導向的瀏覽器體驗。
Arc 打破了傳統瀏覽器的界限，設計上注重簡潔、直觀的用戶界面，並致力於提升使用者的工作流程效率。&lt;/p>
&lt;h3 id="zen-browser">Zen Browser
&lt;/h3>&lt;p>&lt;a class="link" href="https://zen-browser.app/" target="_blank" rel="noopener"
>&lt;strong>Zen Browser&lt;/strong>&lt;/a> 的設計與 Arc 非常相似，
與 Arc 最大的不同是，Zen Browser 基於 Mozilla Firefox。&lt;/p>
&lt;h2 id="命令行工具">命令行工具
&lt;/h2>&lt;h3 id="bat">bat
&lt;/h3>&lt;p>&lt;a class="link" href="https://github.com/sharkdp/bat" target="_blank" rel="noopener"
>&lt;strong>bat&lt;/strong>&lt;/a> 是一個 &lt;code>cat&lt;/code> 替代品，用於在命令行中顯示文件內容。
它提供了語法辨識、行號顯示、分頁功能等，比傳統的 cat 更加直觀。&lt;/p>
&lt;h3 id="fzf">fzf
&lt;/h3>&lt;p>&lt;a class="link" href="https://junegunn.github.io/fzf/" target="_blank" rel="noopener"
>&lt;strong>fzf&lt;/strong>&lt;/a> 是一個模糊搜尋工具，
可以在終端機中，以選單的方式搜尋檔案、指令紀錄、運行的程式&amp;hellip;等。&lt;/p>
&lt;p>也有非常多的工具可以與 fzf 結合，讓搜尋變得更加靈活。&lt;/p>
&lt;h3 id="ripgrep">ripgrep
&lt;/h3>&lt;p>&lt;a class="link" href="https://github.com/BurntSushi/ripgrep" target="_blank" rel="noopener"
>&lt;strong>ripgrep&lt;/strong>&lt;/a> 是一款超快速的檔案內容搜尋工具， 用來取代傳統的 grep。
它比 grep、ack、ag（The Silver Searcher）更快，並且內建遞迴搜尋、忽略 &lt;code>.gitignore&lt;/code> 規則。&lt;/p>
&lt;h3 id="delta">delta
&lt;/h3>&lt;p>&lt;a class="link" href="https://github.com/dandavison/delta" target="_blank" rel="noopener"
>&lt;strong>delta&lt;/strong>&lt;/a> 是一款美觀的 Git Diff Viewer，用來取代 git diff。
提供語法辨識、側邊欄、行內變更顯示，讓 git diff 變得更清晰易讀。&lt;/p></description></item><item><title>螞蟻演算法 - Python 範例</title><link>https://blog.mirumo.net/post/antcolonyoptimization/</link><pubDate>Sun, 05 Jan 2025 23:29:49 +0800</pubDate><guid>https://blog.mirumo.net/post/antcolonyoptimization/</guid><description>&lt;img src="https://blog.mirumo.net/post/antcolonyoptimization/cover.png" alt="Featured image of post 螞蟻演算法 - Python 範例" />&lt;p>前陣子，我的女朋友帶著一臉焦急來找我求救，說她需要完成一個關於&lt;strong>螞蟻演算法&lt;/strong>的報告，但完全不知道怎麼做，希望我幫幫他。「作業要自己做！」看了一下我的行程然後跟她說了這句話。&lt;/p>
&lt;p>。&lt;br>
。&lt;br>
。&lt;/p>
&lt;p>「好啦！」&lt;br>
（專案 PR 我還沒 Review 完耶 QAQ ~）&lt;/p>
&lt;p>。&lt;br>
。&lt;br>
。&lt;/p>
&lt;p>❗️❗️ 女朋友表示：以上純屬虛構 ❗️❗️&lt;/p>
&lt;h2 id="什麼是螞蟻演算法">什麼是螞蟻演算法？
&lt;/h2>&lt;p>螞蟻演算法（Ant Colony Optimization, ACO）是一種受自然界啟發的優化演算法，
其靈感來源於螞蟻群體尋找食物時的集體行為。
這個演算法由義大利科學家 Marco Dorigo 在 1992 年提出，
並在後續的研究中被廣泛應用於解決各種複雜的組合優化問題。&lt;/p>
&lt;p>螞蟻在探索食物時，會在經過的路徑上釋放費洛蒙，
費洛蒙的濃度越高，其他螞蟻選擇這條路徑的機率也越大。
然而，費洛蒙會隨時間揮發，因此如果一條路徑較長或效率較低，
費洛蒙的吸引力會逐漸減弱。
相反的，短而有效的路徑會因為更多螞蟻的選擇而累積更多費洛蒙，最終成為群體的最優選擇。螞蟻演算法的核心在於模擬這一過程，通過不斷迭代來逼近最優解。&lt;/p>
&lt;h2 id="螞蟻演算法的步驟">螞蟻演算法的步驟
&lt;/h2>&lt;p>螞蟻演算法通過以下幾個步驟來模擬螞蟻的行為：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>初始化：設定蟻群的活動空間，這個空間通常用來代表問題的解決範圍或解空間。同時，也會設定費洛蒙的初始濃度和其他參數。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解的構建：蟻群中的螞蟻開始在活動空間中隨機遊走，根據費洛蒙濃度和啟發式資訊選擇路徑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>費洛蒙更新：每當一隻螞蟻完成了一次解的建構，演算法便會更新這段路徑上的費洛蒙值。有效的路徑會獲得更多的費洛蒙，反之則會減少。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>迭代：重複步驟2和3，直到達到停止條件，如固定的迭代次數或解的改進程度不再顯著。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通過這些步驟，螞蟻演算法能夠在解空間中發現隱藏的最佳解，並適應各種複雜的問題。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">procedure ACO_MetaHeuristic is
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> while not terminated do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> generateSolutions()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> daemonActions()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pheromoneUpdate()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> repeat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end procedure
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="螞蟻的路徑選擇">螞蟻的路徑選擇
&lt;/h2>&lt;p>螞蟻在選擇路徑時，主要依賴於費洛蒙的濃度。
具體來說，當濃度越高時，螞蟻選擇該路徑的機率也越高，
我們用以下公式來表示螞蟻從當前節點 \(i\) 選擇下一個節點 \(j\) 的機率：&lt;/p>
$$
P_{ij} = \frac{\tau_{ij}^{\alpha} \eta_{ij}^{\beta}}{\sum_{k \in N_i} \tau_{ik}^{\alpha} \eta_{ik}^{\beta}}
$$&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>\(\tau_{ij}\) 代表從節點 \(i\) 到節點 \(j\) 的費洛蒙濃度。&lt;/li>
&lt;li>\(\eta_{ij}\) 代表啟發式資訊（該問題的結果優劣），通常是距離的倒數 \(\frac{1}{d_{ij}}\)。&lt;/li>
&lt;li>\(\alpha\) 和 \(\beta\) 是兩個參數，分別控制費洛蒙與啟發式資訊的影響程度。&lt;/li>
&lt;li>\(N_i\) 為當前螞蟻可選擇的鄰近節點集合。&lt;/li>
&lt;/ul>
&lt;p>當 \(\alpha\) 值較大時，螞蟻更傾向於選擇費洛蒙濃度高的路徑，
而當 \(\beta\) 值較大時，則更強調啟發式資訊（如較短的距離）。
適當調整這些參數，能夠提升演算法的性能。&lt;/p>
&lt;h2 id="費洛蒙的更新">費洛蒙的更新
&lt;/h2>&lt;p>費洛蒙更新機制確保了有效路徑的增強與次優路徑的淘汰。更新過程通常包含兩個部分：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>費洛蒙蒸發：為了避免過早收斂至局部最優解，費洛蒙會隨時間逐漸減少，其衰減公式為：&lt;/p>
$$
\tau_{ij} \leftarrow (1 - \rho) \cdot \tau_{ij}
$$&lt;p>其中，\(\rho\) 為蒸發率（0 &amp;lt; \(\rho\) &amp;lt; 1），用來控制費洛蒙的衰減速度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>費洛蒙增強：當螞蟻成功找到解後，根據路徑長度分配新的費洛蒙：&lt;/p>
$$
\tau_{ij} \leftarrow \tau_{ij} + \sum_{k=1}^{m} \Delta \tau_{ij}^{k}
$$&lt;p>其中，\(\Delta \tau_{ij}^{k}\) 為第 \(k\) 隻螞蟻在路徑上的費洛蒙貢獻，
通常與解的品質相關，例如：\(\Delta \tau_{ij}^{k} = \frac{Q}{L_k}\)。&lt;/p>
&lt;ul>
&lt;li>\(Q\) 為常數，用來調整費洛蒙的強度。&lt;/li>
&lt;li>\(L_k\) 為第 隻螞蟻找到的解的路徑長度，越短的路徑獲得的費洛蒙越多。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="實作範例">實作範例
&lt;/h2>&lt;p>最後，為了展示螞蟻演算法的應用，這裡以旅行推銷員問題（&lt;a class="link" href="https://en.wikipedia.org/wiki/Travelling_salesman_problem" target="_blank" rel="noopener"
>TSP&lt;/a>）為例。
TSP 的目標是尋找最短路徑，使旅行推銷員能夠走訪所有城市且最終返回起點。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/mirumodapon/ant-colony-optimization-python-example" target="_blank" rel="noopener"
>&lt;img src="https://opengraph.githubassets.com/29fd19c671af65614e5fae3b201cdc010df3618ae56b978e523185004c914d7c/mirumodapon/ant-colony-optimization-python-example"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;hr>
&lt;h4>參考資料&lt;/h4>
&lt;ul>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/Ant_colony_optimization_algorithms" target="_blank" rel="noopener"
>wikipedia - Ant colony optimization algorithms&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Hello World</title><link>https://blog.mirumo.net/post/helloworld/</link><pubDate>Sat, 04 Jan 2025 22:59:50 +0800</pubDate><guid>https://blog.mirumo.net/post/helloworld/</guid><description>&lt;p>在資訊科技領域中，「Hello World」經常被用來作為測試開發環境是否正確設置的一種方式，透過將這段文字打印或顯示出來，開發者能迅速確認系統的基本運行狀態。因此我利用這篇文章，作為整個部落格的第一篇文。&lt;/p>
&lt;h2 id="hello-world-的起源">Hello World 的起源
&lt;/h2>&lt;p>「Hello World」這個程式的歷史可以追溯到 1970 年代。《The C Programming Language》（C 語言程式設計）這本經典書籍中，Brian Kernighan 和 Dennis Ritchie 使用了一個簡單的範例來介紹如何在螢幕上顯示文字，而這個範例就是「Hello, World!」。由於其簡單易懂且不容易出錯，它很快成為程式設計入門的標誌。&lt;/p>
&lt;p>「Hello, World」的概念可以追溯到 Brian Kernighan 在 1974 年的內部技術手冊 《Programming in C: A Tutorial》，
他在該手冊中用 B 語言（C 語言的前身）展示了類似的範例程式碼：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-b" data-lang="b">&lt;span class="line">&lt;span class="cl">&lt;span class="c">main() {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> printf(&amp;#34;hello&lt;/span>&lt;span class="nt">,&lt;/span>&lt;span class="c"> world&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">}
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="hugo-功能測試">Hugo 功能測試
&lt;/h2>&lt;h3 id="一般標記">一般標記
&lt;/h3>&lt;h4 id="斜體">&lt;em>斜體&lt;/em>
&lt;/h4>&lt;p>&lt;code>*斜體*&lt;/code>&lt;/p>
&lt;h4 id="粗體">&lt;strong>粗體&lt;/strong>
&lt;/h4>&lt;p>&lt;code>**粗體**&lt;/code>&lt;/p>
&lt;h4 id="刪除線">&lt;del>刪除線&lt;/del>
&lt;/h4>&lt;p>&lt;code>~~刪除線~~&lt;/code>&lt;/p>
&lt;h4 id="標記">&lt;mark>標記&lt;/mark>
&lt;/h4>&lt;p>&lt;code>==標記==&lt;/code>&lt;/p>
&lt;h4 id="底線">&lt;ins>底線&lt;/ins>
&lt;/h4>&lt;p>&lt;code>++底線++&lt;/code>&lt;/p>
&lt;h4 id="上標">上&lt;sup>標&lt;/sup>
&lt;/h4>&lt;p>&lt;code>上^標^&lt;/code>&lt;/p>
&lt;h4 id="下標">下&lt;sub>標&lt;/sub>
&lt;/h4>&lt;p>&lt;code>下~標~&lt;/code>&lt;/p>
&lt;h3 id="程式碼">程式碼
&lt;/h3>&lt;h4 id="一般顯示">一般顯示
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define hugo
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="程式碼標記">程式碼標記
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line hl">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line hl">&lt;span class="ln">6&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line hl">&lt;span class="ln">7&lt;/span>&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Value of i:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line hl">&lt;span class="ln">8&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">9&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="latex-math">Latex Math
&lt;/h3>\[
\begin{aligned}
KL(\hat{y} || y) &amp;= \sum_{c=1}^{M}\hat{y}_c \log{\frac{\hat{y}_c}{y_c}} \\
JS(\hat{y} || y) &amp;= \frac{1}{2}(KL(y||\frac{y+\hat{y}}{2}) + KL(\hat{y}||\frac{y+\hat{y}}{2}))
\end{aligned}
\]&lt;p>This is an inline \(a^*=x-b^*\) equation.&lt;/p>
&lt;hr>
&lt;h4>參考資料&lt;/h4>
&lt;ul>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program" target="_blank" rel="noopener"
>wikipedia - &amp;ldquo;Hello, World!&amp;rdquo; program&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>